@page "/login"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@inject DummyAuthStateProvider DummyAuthStateProvider
@using Newtonsoft.Json.Linq
@using Auth;
@using Microsoft.IdentityModel.Tokens;
@using System.IdentityModel.Tokens.Jwt;
@inject Blazored.LocalStorage.ILocalStorageService sessionStorage
<h1>Sign in</h1>


<div class="container">
    <div class="row">
        <p>Please fill in this form to sign in into account.</p>
    </div>
    <div class="row">
        <div class="col">
            <label for="email"><b>Email</b></label>
        </div>
        <div class="col">
            <input type="text" placeholder="Enter Email" @bind="the_account.Email" name="email" required><br /><br />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <label for="psw"><b>Password</b></label>
        </div>
        <div class="col">
            <input type="password" placeholder="Enter Password" @bind="the_account.Password" name="psw" required><br /><br />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <p><button @onclick="@(()=>Sign_in())">Sign in</button></p>
        </div>
        <div class="col">
            <p><button @onclick="Back">Back</button></p>
        </div>
    </div>



    <div class="container signin">
        <p> Create an account? <a role="button" @onclick="Register">Register</a>.</p><br />
    </div>
</div>



@code {

    private string apiUrl = "https://localhost:44386/api/users/login";
    Response response;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private Request the_account = new Request();

    private async Task SendCredentials()
    {
        response = await Http.PostJsonAsync<Response>(apiUrl, the_account);
        System.Console.WriteLine(response.token);
    }

    private async Task UpdateAuthentication(string token)
    {
        
        DummyAuthStateProvider.token = token;
        await DummyAuthStateProvider.NotifyStateChange();
    }

    private async Task Sign_in()
    {
        await SendCredentials();
        await UpdateAuthentication(response.token);
        await sessionStorage.SetItemAsync("token", response.token);
        var name = await sessionStorage.GetItemAsync<string>("token");

        NavigationManager.NavigateTo("");
    }

    private void Back()
    {
        NavigationManager.NavigateTo("");
    }

    private void Register()
    {
        NavigationManager.NavigateTo("/register");
    }

    public class Request
    {

        public string Email { get; set; }

        public string Password { get; set; }
    }

    public class Response
    {
        public string token { get; set; }
    }

    public class VM
    {
        public Guid VMId { get; set; }
        public string RealID { get; set; }
        public string Name { get; set; }
        public string Configuration { get; set; }
        public string LastSave { get; set; }
        public Guid UserId { get; set; }
    }

}
