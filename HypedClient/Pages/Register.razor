@page "/register"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>Register</h1>


<div class="container">
    <div class="row">
        <p>Please fill in this form to create an account.</p>
    </div>

    <div class="row">
        <div class="col">
            <label for="text"><b>First name</b></label>
        </div>
        <div class="col">
            <input type="text" placeholder="First name" name="name" @bind="Account.FirstName" required>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <label for="text"><b>Last name</b></label>
        </div>
        <div class="col">
            <input type="text" placeholder="Last name" name="name" @bind="Account.LastName" required>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <label for="email"><b>Email</b></label>
        </div>
        <div class="col">
            <input type="text" placeholder="Enter Email" name="email" @bind="Account.Email" required>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <label for="psw"><b>Password</b></label>
        </div>
        <div class="col">
            <input type="password" placeholder="Enter Password" name="psw" @bind="Account.Password" required>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <label for="psw-repeat"><b>Repeat Password</b></label>
        </div>
        <div class="col">
            <input type="password" placeholder="Repeat Password" name="psw-repeat" @bind="repeatPass" required>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <label for="txt"><b>Work Place</b></label>
        </div>
        <div class="col">
            <input type="text" placeholder="Work Place" name="work" @bind="Account.Workplace" required>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <label for="txt"><b>Position title</b></label>
        </div>
        <div class="col">
            <input type="text" placeholder="Position title" name="group" @bind="Account.PositionTitle" required>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <label for="no"><b>country</b></label>
        </div>
        <div class="col">
            <input type="text" placeholder="Contact no." name="co-no" @bind="Account.Country" required>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <label for="no"><b>Contact no.</b></label>
        </div>
        <div class="col">
            <input type="number" placeholder="Contact no." name="co-no" @bind="Account.ContactNumber" required>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <p><button @onclick="InsertUser">Sign in</button></p>
        </div>
        <div class="col">
            <p><button @onclick="Back">Back</button></p>
        </div>
    </div>

    <div class="container signin">
        <p>Already have an account? <a role="button" @onclick="Login">Sign in</a>.</p><br />
    </div>
</div>



@code {

    private string errMsg = "";

    private string repeatPass="";

    private string apiUrl = "https://localhost:44386/api/users";

    private AccountDetails Account = new AccountDetails();
    private AccountDetails _editAccount = new AccountDetails();

    private AccountDetails[] accounts;

    protected override async Task OnInitializedAsync() => await GetTodoItems();

    private async Task GetTodoItems()
    {
        accounts = await Http.GetJsonAsync<AccountDetails[]>(apiUrl);
    }

    private void InsertUser()
    {
        var editItem = accounts.FirstOrDefault(i => i.Email == Account.Email);
        if (editItem == null) {
            if (Account.Password == repeatPass)
            {
                _editAccount = new AccountDetails
                {
                    FirstName = Account.FirstName,
                    LastName = Account.LastName,
                    Email = Account.Email,
                    Country = Account.Country,
                    Password = Account.Password,
                    Rights = "0",
                    Workplace = Account.Workplace,
                    PositionTitle = Account.PositionTitle,
                    ContactNumber = Account.ContactNumber,
                    VMS = null
                };
            }
            else
            {
                errMsg = "Passwords do not match!";
            }

        }
        else
        {
            errMsg = "E-mail already in use!";
        }

    }

    private async Task SaveItem()
    {
        InsertUser();
        await Http.PutJsonAsync<AccountDetails>("/sample-data/account.json", Account);
        await GetTodoItems();
        NavigationManager.NavigateTo("");
    }

    private void Back()
    {
        NavigationManager.NavigateTo("");
    }

    private void Login()
    {
        NavigationManager.NavigateTo("/login");
    }

    public class AccountDetails
    {
        public Guid UserId { get; set; }

        public string FirstName { get; set; }

        public string LastName { get; set; }

        public string Email { get; set; }

        public string Country { get; set; }

        public string Password { get; set; }

        public string Rights { get; set; }

        public string Workplace { get; set; }

        public string PositionTitle { get; set; }

        public string ContactNumber { get; set; }

        public string VMS { get; set; }
    }
}
