@page "/register"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService sessionStorage


<div class="jumbotron" style="width: 100%; height: 100%; position: fixed; display: block; top: 0px; left: 0px; float: none; text-align: center; padding: 0 0 0 0">
    <h4 class="display-3">Sign Up!<br></h4>
    <p class="lead">Please fill in this form to create an account.<br></p>
    <hr class="my-4">
    <div class="row" style="height: 30px;">
        <div class=" col-6" style="height: 30px;">
            <h5>First name</h5>
        </div>
        <div class=" col-6" style="height: 30px;">
            <input type="text" placeholder="First name" name="name" @bind="Account.FirstName" required><br /><br />
        </div>
    </div>
    <hr style="">
    <div class="row" style="height: 30px;">
        <div class=" col-6" style="height: 30px;">
            <h5>Last name</h5>
        </div>
        <div class="  col-6">
            <input type="text" placeholder="Last name" name="name" @bind="Account.LastName" required><br /><br />
        </div>
    </div>
    <hr style="">
    <div class="row" style="height: 30px;">
        <div class=" col-6" style="height: 30px;">
            <h5>Email</h5>
        </div>
        <div class="  col-6">
            <input type="text" placeholder="Enter Email" name="email" @bind="Account.Email" required><br /><br />
        </div>
    </div>
    <hr style="">
    <div class="row" style="height: 30px;">
        <div class=" col-6" style="height: 30px;">
            <h5>Password</h5>
        </div>
        <div class="  col-6">
            <input type="password" placeholder="Enter Password" name="psw" @bind="Account.Password" required><br /><br />
        </div>
    </div>
    <hr style="">
    <div class="row" style="height: 30px;">
        <div class=" col-6" style="height: 30px;">
            <h5>Repeat Password</h5>
        </div>
        <div class="  col-6">
            <input type="password" placeholder="Repeat Password" name="psw-repeat" @bind="repeatPass" required><br /><br />
        </div>
    </div>
    <hr style="">
    <div class="row" style="height: 30px;">
        <div class=" col-6" style="height: 30px;">
            <h5>Workplace</h5>
        </div>
        <div class="  col-6">
            <input type="text" placeholder="Work Place" name="work" @bind="Account.Workplace" required><br /><br />
        </div>
    </div>
    <hr style="">
    <div class="row" style="height: 30px;">
        <div class=" col-6" style="height: 30px;">
            <h5>Position title</h5>
        </div>
        <div class="  col-6">
            <input type="text" placeholder="Position title" name="group" @bind="Account.PositionTitle" required><br /><br />
        </div>
    </div>
    <hr style="">
    <div class="row" style="height: 30px;">
        <div class=" col-6" style="height: 30px;">
            <h5>Country</h5>
        </div>
        <div class="  col-6">
            <input type="text" placeholder="Contact no." name="co-no" @bind="Account.Country" required><br /><br />
        </div>
    </div>
    <hr style="">
    <div class="row" style="height: 30px;">
        <div class=" col-6" style="height: 30px;">
            <h5>ContactNumber</h5>
        </div>
        <div class="  col-6">
            <input type="number" placeholder="Contact no." name="co-no" @bind="Account.ContactNumber" required><br /><br />
        </div>
    </div>
    <hr style="">
    <div class="row" style="height: 30px;">
        <div class=" col-6" style="height: 30px;">
            <button type="button" @onclick="@SaveItem" class="btn btn-primary" style="display: inline-block; width: 15rem;">Sign In</button>
        </div>
        <div class="  col-6">
            <button type="button" @onclick="Back" class="btn btn-primary" style="width: 15rem;">Back</button>
        </div>
    </div>
    <hr style="">
    <div class="row" style="height: 30px;">
        <div class=" col-6" style="height: 30px;">
            <h4>Already hyped? Sign in!<br></h4>
        </div>
        <div class=" col-6" style="height: 30px;">
            <button @onclick="Login" class="btn btn-primary" style="text-decoration-color: rgb(255, 128, 0); background-color: rgb(255, 128, 0); width: 15rem;">SIGN IN!</button>
        </div>
    </div>
</div>

    @if (inputErr)
    {
        <div class="row">
            <div class="col">
                <p>@errMsg</p>
            </div>
        </div>
    }




@code {

    private bool inputErr = false;
    private string errMsg = "";

    private string repeatPass = "";

    private string apiUrl = "https://localhost:44386/api/users";

    private AccountDetails Account = new AccountDetails();
    private AccountDetails _editAccount = new AccountDetails();

    private AccountDetails[] accounts;

    //protected override async Task OnInitializedAsync() => await GetTodoItems();

    private async Task GetTodoItems()
    {
        var name = await sessionStorage.GetItemAsync<string>("token");
        Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + name);
        accounts = await Http.GetJsonAsync<AccountDetails[]>(apiUrl);
    }

    private void InsertUser()
    {
        // TODO: find another way to check FE input validation data
        //var editItem = accounts.FirstOrDefault(i => i.Email == Account.Email);
        //if (editItem == null)
        //{
        if (Account.Password == repeatPass)
        {
            _editAccount = new AccountDetails
            {
                FirstName = Account.FirstName,
                LastName = Account.LastName,
                Email = Account.Email,
                Country = Account.Country,
                Password = Account.Password,
                Rights = "0",
                Workplace = Account.Workplace,
                PositionTitle = Account.PositionTitle,
                ContactNumber = Account.ContactNumber,
                VMS = null
            };
        }
        else
        {
            inputErrMsg(2);
        }

        //}
        //else
        //{
        //    inputErrMsg(1);
        //}

    }


    private void inputErrMsg(int code)
    {

        switch (code)
        {
            case 1:
                errMsg = "E-mail already in use!";
                break;
            case 2:
                errMsg = "Passwords do not match!";
                break;
            default:
                errMsg = "";
                break;
        }
        inputErr = true;
    }

    private async Task SaveItem()
    {
        InsertUser();
        await Http.PostJsonAsync<AccountDetails>(apiUrl, Account);
        await GetTodoItems();
        NavigationManager.NavigateTo("");
    }

    private void Back()
    {
        NavigationManager.NavigateTo("");
    }

    private void Login()
    {
        NavigationManager.NavigateTo("/login");
    }

    public class AccountDetails
    {
        public string UserId { get; set; }

        public string FirstName { get; set; }

        public string LastName { get; set; }

        public string Email { get; set; }

        public string Country { get; set; }

        public string Password { get; set; }

        public string Rights { get; set; }

        public string Workplace { get; set; }

        public string PositionTitle { get; set; }

        public string ContactNumber { get; set; }

        public ICollection<VM> VMS { get; set; }
    }

    public class VM
    {
        public Guid VMId { get; set; }
        public string RealID { get; set; }
        public string Name { get; set; }
        public string Configuration { get; set; }
        public string LastSave { get; set; }
        public ICollection<Networks> Networks { get; set; }
        public int RAM { get; private set; }
        public int Cores { get; private set; }
        public virtual ICollection<SC> SCs { get; private set; }
        public Guid UserId { get; set; }
    }

    public class Networks
    {
        public Guid NetId { get; private set; }
        public string Name { get; private set; }
        public string Notes { get; private set; }
        public string InstanceID { get; private set; }
        public Guid VMId { get; private set; }
    }

    public class SC
    {
        public Guid SCId { get; private set; }
        public string Name { get; private set; }
        public string InstanceId { get; private set; }
        public virtual ICollection<VHD> VHDs { get; private set; }
        public virtual ICollection<CDDVD> CDDVDs { get; private set; }
        public Guid VMId { get; private set; }
    }

    public class VHD
    {
        public Guid VHDId { get; private set; }
        public Guid SCId { get; private set; }
        public string Name { get; private set; }
        public string InstanceId { get; private set; }
        public string Path { get; private set; }
        public int Size { get; private set; }
    }

    public class CDDVD
    {
        public Guid CDDVDId { get; private set; }
        public string InstanceId { get; private set; }
        public string Name { get; private set; }
        public Guid SCId { get; private set; }
    }
}
