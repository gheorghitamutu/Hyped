@page "/machine"
@inject HttpClient Http
@attribute [Authorize]
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@using System.IdentityModel.Tokens.Jwt;

@using System.IO;

<!-- Modal for new machine -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <label for="email"><b>VMId : </b></label>
                        </div>
                        <div class="col">
                            <fieldset>
                                <input type="text" placeholder=@_addMachine.RealID @bind="_addMachine.RealID">
                            </fieldset>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label for="text"><b>Name : </b></label>
                        </div>
                        <div class="col">
                            <input type="text" placeholder=@_addMachine.Name @bind="_addMachine.Name">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label for="text"><b>Configuration : </b></label>
                        </div>
                        <div class="col">
                            <input type="text" placeholder=@_addMachine.Configuration @bind="_addMachine.Configuration">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label for="psw"><b>LastSave : </b></label>
                        </div>
                        <div class="col">
                            <fieldset disabled>
                                <input type="text" placeholder=@_addMachine.LastSave @bind="_addMachine.LastSave">
                            </fieldset>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="@AddItem">Save changes</button>
            </div>
        </div>
    </div>
</div>


<!-- Modal for edit machine -->
<div class="modal fade" id="exampleEdit" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Edit settings</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="container">

                    <div class="row">
                        <div class="col">
                            <label for="text"><b>Change Name : </b></label>
                        </div>
                        <div class="col">
                            <input type="text" placeholder=@_addMachine.Name @bind="_addMachine.Name">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label for="text"><b>Change Configuration : </b></label>
                        </div>
                        <div class="col">
                            <input type="text" placeholder=@_addMachine.Configuration @bind="_addMachine.Configuration">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label for="email"><b>Load ISO image: </b></label>
                        </div>
                        <div class="col">
                            <fieldset>
                                <InputFile OnChange="HandleSelection" />
                                <p>@status</p>
                            </fieldset>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label for="psw"><b>LastSave : </b></label>
                        </div>
                        <div class="col">
                            <fieldset disabled>
                                <input type="text" placeholder=@_addMachine.LastSave @bind="_addMachine.LastSave">
                            </fieldset>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="@AddItem">Save changes</button>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid border border-dark fill">
    <div class="row h-100">
        <div class="col-md-1 border border-dark ">
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal" @onclick="@(()=> LastItem())">
                <span class="oi oi-calculator" aria-hidden="true"></span>New
            </button>
        </div>
        <div class="col-md-1 border border-dark">
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleEdit" @onclick="@(()=> LastItem())">
                <span class="oi oi-calculator" aria-hidden="true"></span>Edit
            </button>
        </div>
        <div class="col-md-1 border border-dark">
            <button>
                <span class="oi oi-calculator" aria-hidden="true"></span>Delete
            </button>
        </div>
        <div class="col-md-1 border border-dark">
            <button>
                <span class="oi oi-calculator" aria-hidden="true"></span>Start
            </button>
        </div>
        <div class="col-md-8 border border-dark">

        </div>
    </div>



    <div class="row h-100">
        <div class="col-md-4 border border-dark h-100">
            @if (machines == null)
            {

            }
            else
            {

                <div class="list-group" id="list-tab" role="tablist">
                    @foreach (var machine in machines)
                    {
                        <a class="list-group-item list-group-item-action" role="tab" @onclick="@(() => GetVM(machine))">@machine.Name</a>
                    }
                </div>
            }
        </div>
        <div class="col-xs-12 col-md-8 border border-dark h-100">
            <div class="row">
                @_editMachine.RealID
            </div>
            <div class="row">
                @_editMachine.Name
            </div>
            <div class="row">
                @_editMachine.Configuration
            </div>
            <div class="row">
                @_editMachine.LastSave
            </div>
        </div>
    </div>
</div>


@code {

    // TO BE MODIFIED, aici am testat cu back-end-ul rulat pe alt PC din retea
    private string apiUrl = "https://localhost:5001/api/vms";
    private string name = "";

    private MachineDetails _editMachine = new MachineDetails();

    private MachineDetails _addMachine = new MachineDetails();

    private MachineDetails[] machines;

    protected override async Task OnInitializedAsync() => await GetMachines();

    private void GetVM(MachineDetails vm)
    {
        _editMachine = vm;
    }

    private async Task GetMachines()
    {
        var name = await sessionStorage.GetItemAsync<string>("token");
        Http.DefaultRequestHeaders.Remove("Authorization");
        Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + name);
        machines = await Http.GetJsonAsync<MachineDetails[]>(apiUrl);
        name = await sessionStorage.GetItemAsync<string>("id");
    }

    private void EditItem(Guid id)
    {
        var editItem = machines.Single(i => i.VMId == id);
        _editMachine = new MachineDetails
        {
            VMId = editItem.VMId,
            RealID = editItem.RealID,
            Name = editItem.Name,
            Configuration = editItem.Configuration,
            LastSave = editItem.LastSave,
            UserId = editItem.UserId
        };
    }

    private async Task DecodeJWT()
    {
        string name = await sessionStorage.GetItemAsync<string>("token");
        var handler = new JwtSecurityTokenHandler();
        var jsonToken = handler.ReadToken(name);
        var tokenS = handler.ReadToken(name) as JwtSecurityToken;
        name = tokenS.Claims.First(claim => claim.Type == "User Id").Value;
        System.Console.WriteLine(name);
    }

    private void LastItem()
    {
        GetMachines();
        DateTime date = DateTime.Now;
        DecodeJWT();
        var lastItem = machines.LastOrDefault();
        if (lastItem == null)
        {
            _addMachine = new MachineDetails
            {
                VMId = _addMachine.VMId,
                RealID = _addMachine.RealID,
                Name = _addMachine.Name,
                Configuration = _addMachine.Configuration,
                LastSave = Convert.ToString(date),
                UserId = Guid.Parse(name),
                Networks = null,
                RAM = 1024,
                Cores = 1,
                SCs = null
            };
        }
        else
        {
            _addMachine = new MachineDetails
            {
                VMId = lastItem.VMId,
                RealID = Convert.ToString(Convert.ToInt32(lastItem.RealID) + 1),
                Name = lastItem.Name,
                Configuration = lastItem.Configuration,
                LastSave = Convert.ToString(date),
                UserId = Guid.Parse(name),
                Networks = null,
                RAM = 1024,
                Cores = 1,
                SCs = null
            };
        }

    }

    private async Task SaveItem()
    {
        EditItem(_editMachine.VMId);
        var name = await sessionStorage.GetItemAsync<string>("token");
        Http.DefaultRequestHeaders.Remove("Authorization");
        Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + name);
        await Http.PutJsonAsync<MachineDetails>(apiUrl, _editMachine);
        await GetMachines();
    }

    private async Task AddItem()
    {
        var name = await sessionStorage.GetItemAsync<string>("token");
        Http.DefaultRequestHeaders.Remove("Authorization");
        Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + name);
        await Http.PostJsonAsync<MachineDetails>(apiUrl, _addMachine);
        await GetMachines();
    }

    public class MachineDetails
    {
        public Guid VMId { get; set; }
        public string RealID { get; set; }
        public string Name { get; set; }
        public string Configuration { get; set; }
        public string LastSave { get; set; }
        public ICollection<Networks> Networks { get; set; }
        public int RAM { get; set; }
        public int Cores { get; set; }
        public virtual ICollection<SC> SCs { get; set; }
        public Guid UserId { get; set; }
    }

    public class Networks
    {
        public Guid NetId { get; private set; }
        public string Name { get; private set; }
        public string Notes { get; private set; }
        public string InstanceID { get; private set; }
        public Guid VMId { get; private set; }
    }

    public class SC
    {
        public Guid SCId { get; private set; }
        public string Name { get; private set; }
        public string InstanceId { get; private set; }
        public virtual ICollection<VHD> VHDs { get; private set; }
        public virtual ICollection<CDDVD> CDDVDs { get; private set; }
        public Guid VMId { get; private set; }
    }

    public class VHD
    {
        public Guid VHDId { get; private set; }
        public Guid SCId { get; private set; }
        public string Name { get; private set; }
        public string InstanceId { get; private set; }
        public string Path { get; private set; }
        public int Size { get; private set; }
    }

    public class CDDVD
    {
        public Guid CDDVDId { get; private set; }
        public string InstanceId { get; private set; }
        public string Name { get; private set; }
        public Guid SCId { get; private set; }
    }


    string status;

    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            // Just load into .NET memory to show it can be done
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);

            status = $"Finished loading {file.Size} bytes from {file.Name}";
        }
    }

}
