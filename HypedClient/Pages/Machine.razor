@page "/machine"
@inject HttpClient Http
@attribute [Authorize]
@inject Blazored.LocalStorage.ILocalStorageService sessionStorage
@inject DummyAuthStateProvider DummyAuthStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Authorization
@using System.IdentityModel.Tokens.Jwt;
@using Serilog;
@using System.Text.Json;
@using System.Security.Claims;
@using System.IO;

<!-- Modal for new machine -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Ce faceti ma title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <label for="email"><b>VMId : </b></label>
                        </div>
                        <div class="col">
                            <fieldset>
                                <input type="text" placeholder=@_addMachine.RealID @bind="_addMachine.RealID">
                            </fieldset>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label for="text"><b>Name : </b></label>
                        </div>
                        <div class="col">
                            <input type="text" placeholder=@_addMachine.Name @bind="_addMachine.Name">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label for="text"><b>Configuration : </b></label>
                        </div>
                        <div class="col">
                            <input type="text" placeholder=@_addMachine.Configuration @bind="_addMachine.Configuration">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label for="psw"><b>LastSave : </b></label>
                        </div>
                        <div class="col">
                            <fieldset disabled>
                                <input type="text" placeholder=@_addMachine.LastSave @bind="_addMachine.LastSave">
                            </fieldset>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="@AddItem">Save changes</button>
            </div>
        </div>
    </div>
</div>


<!-- Modal for edit machine -->
<div class="modal fade" id="exampleEdit" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Edit settings</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="container">

                    <div class="row">
                        <div class="col">
                            <label for="text"><b>Change Name : </b></label>
                        </div>
                        <div class="col">
                            <input type="text" placeholder=@_addMachine.Name @bind="_addMachine.Name">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label for="text"><b>Change Configuration : </b></label>
                        </div>
                        <div class="col">
                            <input type="text" placeholder=@_addMachine.Configuration @bind="_addMachine.Configuration">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label for="email"><b>Load ISO image: </b></label>
                        </div>
                        <div class="col">
                            <fieldset>
                                <InputFile OnChange="HandleSelection" />
                                <p>@status</p>
                            </fieldset>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label for="psw"><b>LastSave : </b></label>
                        </div>
                        <div class="col">
                            <fieldset disabled>
                                <input type="text" placeholder=@_addMachine.LastSave @bind="_addMachine.LastSave">
                            </fieldset>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="close-modal" type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="@AddItem">Save changes</button>
            </div>
        </div>
    </div>
</div>

<!-- the main body-->

<div class="container-fluid fill">
    <main role="main" class="container">
        <div class="my-3 p-3 bg-white rounded box-shadow">
            <nav class="navbar navbar-expand-lg navbar-light bg-light" style="">
                <button type="button" class="btn btn-primary" style="" data-toggle="modal" data-target="#exampleModal" @onclick="@(()=> LastItem())">New Machine</button>		  		  
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">			
                    <span class="navbar-toggler-icon"></span>		  
                </button>				  
                <div class="collapse navbar-collapse" id="navbarSupportedContent">			
                    <ul class="navbar-nav mr-auto">			  
                        <li class="nav-item active"></li>			  
                        <li class="nav-item"></li>			  
                        <li class="nav-item"></li>			
                    </ul>			
                    <form class="form-inline my-2 my-lg-0">			  
                    <input class="form-control mr-sm-2" type="text" placeholder="Search" aria-label="Search">			  
                    <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>			
                        </form>		  
                </div>		
            </nav>

            <small class="d-block text-right mt-3">

            </small>
            <div class="row" style="text-align: center;">
                <div class=" col-6">
                    @if (machines == null)
                    {

                    }
                    else
                    {

                    <div class="list-group" id="list-tab" role="tablist">
                        @foreach (var machine in machines)
                        {
                            <a class="list-group-item list-group-item-action" role="tab" @onclick="@(() => GetVM(machine))">@machine.Name</a>
                        }
                    </div>
                    }
                </div>
                <div class="  col-6">
                    <h4 style="text-align: center;">@_editMachine.Name<br><hr style=""></h4>
                <div class="btn-group" role="group" aria-label="Basic example" style="">
                    <button type="button" class="btn btn-secondary">Start</button>
                    <button type="button" class="btn btn-secondary">Stop</button> 
                    <button type="button" class="btn btn-secondary">Delete</button>
                </div>
                <hr style="">
                <div class="row" style="text-align: center;">
                    <div class=" col-4">
                        <h5>General config:<br></h5>
                    </div>
                    <div class="  col-8">
                        <div class="row" style="text-align: center;">
                            <div class="col-4">
                                <h6>RAM:</h6>
                            </div>
                            <div class="col-8">
                                <div class="form-group" style="display: block; float: none; text-align: center;">@_editMachine.RAM</div>
                            </div>
                        </div>
                        <hr style="">
                        <div class="row" style="">
                            <div class=" col-4">
                                <h6>Cores:<br></h6>
                            </div>
                            <div class="  col-8">
                                <div class="form-group" style="display: block; float: none; text-align: center;">@_editMachine.Cores</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row" style="text-align: center;">
                </div><hr style="">
                <div class="row" style="">
                    <div class=" col-4">
                        <h5>Network:</h5>
                    </div>
                    <div class="  col-8">
                        <div class="row" style="">
                            <div class=" col-8">
                                <div class="form-group" style="">
                                    <label>Join a network</label>
                                    <select class="form-control">
                                    <option value="value1">Text 1</option>
                                    <option value="value2">Text 2</option>
                                    <option value="value3">Text 3</option>
                                    </select>
                                 </div>
                            </div>
                            <div class="  col-4">
                            </div>
                        </div>
                    <div class="row" style="">
                        <div class=" col-4">
                        </div>
                        <div class="  col-8">
                        </div>
                    </div>
                    </div>
                </div>
                <hr style="">
                <div class="row" style="">
                    <div class=" col-4">
                        <h5>Virtual HD:<br></h5>
                    </div>
                    <div class="  col-8">
                    </div>
                </div>
                <hr style="">
                <div class="row" style="text-align: center;">
                    <div class=" col-4">
                        <h5>Image file:<br></h5>
                    </div>
                    <div class="  col-8">
                        <div class="row" style="">
                            <div class=" col-8">
                                <div class="form-group" style="">
                                    <label>Select an installation image</label>
                                    <select class="form-control">
                                        <option value="value1">Text 1</option>
                                        <option value="value2">Text 2</option>
                                        <option value="value3">Text 3</option>
                                        </select>
                                </div>
                            </div>
                            <div class="  col-4">
                            </div>
                        </div>
                    </div>
                </div>
                <hr style="">
                </div>
            </div>
        </div>
    </main>
</div>


@code {


    // TO BE MODIFIED, aici am testat cu back-end-ul rulat pe alt PC din retea
    private string apiUrl = "https://localhost:44386/api/vms";
    private string name = "";

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private MachineDetails _editMachine = new MachineDetails();

    private MachineDetails _addMachine = new MachineDetails();

    private MachineDetails[] machines;

    protected override async Task OnInitializedAsync() => await GetMachines();


    private void GetVM(MachineDetails vm)
    {
        _editMachine = vm;
    }

    private async Task GetMachines()
    {
        var name = await sessionStorage.GetItemAsync<string>("token");
        Http.DefaultRequestHeaders.Remove("Authorization");
        Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + name);
        machines = await Http.GetJsonAsync<MachineDetails[]>(apiUrl);
    }

    private void EditItem(Guid id)
    {
        var editItem = machines.Single(i => i.VMId == id);
        _editMachine = new MachineDetails
        {
            VMId = editItem.VMId,
            RealID = editItem.RealID,
            Name = editItem.Name,
            Configuration = editItem.Configuration,
            LastSave = editItem.LastSave,
            UserId = editItem.UserId
        };
    }

    private async Task DecodeJWT()
    {
        string storagedToken = await sessionStorage.GetItemAsync<string>("token");
        var claims = new List<Claim>();
        var payload = storagedToken.Split('.')[1];
        var jsonBytes = ParseBase64WithoutPadding(payload);
        var keyValuePairs = JsonSerializer.Deserialize<Dictionary<string, object>>(jsonBytes);
        keyValuePairs.TryGetValue(ClaimTypes.Role, out object roles);

        if (roles != null)
        {
            if (roles.ToString().Trim().StartsWith("["))
            {
                var parsedRoles = JsonSerializer.Deserialize<string[]>(roles.ToString());

                foreach (var parsedRole in parsedRoles)
                {
                    claims.Add(new Claim(ClaimTypes.Role, parsedRole));
                }
            }
            else
            {
                claims.Add(new Claim(ClaimTypes.Role, roles.ToString()));
            }

            keyValuePairs.Remove(ClaimTypes.Role);
        }

        claims.AddRange(keyValuePairs.Select(kvp => new Claim(kvp.Key, kvp.Value.ToString())));
        Log.Information($"{claims}");
        foreach (Claim claim in claims)
        {
            Log.Information($"{claim.Type} and {claim.Value}");
            name = claim.Value;
            break;
        }
        Log.Information($"{name}");

    }

    private byte[] ParseBase64WithoutPadding(string base64)
    {
        switch (base64.Length % 4)
        {
            case 2: base64 += "=="; break;
            case 3: base64 += "="; break;
        }
        return Convert.FromBase64String(base64);
    }

    private async Task LastItem()
    {
        await GetMachines();
        DateTime date = DateTime.Now;
        await DecodeJWT();
        var lastItem = machines.LastOrDefault();
        if (lastItem == null)
        {
            _addMachine = new MachineDetails
            {
                VMId = _addMachine.VMId,
                RealID = _addMachine.RealID,
                Name = _addMachine.Name,
                Configuration = _addMachine.Configuration,
                LastSave = Convert.ToString(date),
                UserId = Guid.Parse(name),
                Networks = null,
                RAM = 1024,
                Cores = 1,
                SCs = null
            };
        }
        else
        {
            try
            {
                Log.Information($"{lastItem.VMId}");
                Log.Information($"{lastItem.Name}");
                _addMachine = new MachineDetails
                {
                    VMId = lastItem.VMId,
                    RealID = Convert.ToString(Guid.NewGuid()),
                    Name = lastItem.Name,
                    Configuration = lastItem.Configuration,
                    LastSave = Convert.ToString(date),
                    UserId = Guid.Parse(name),
                    Networks = null,
                    RAM = 1024,
                    Cores = 1,
                    SCs = null
                };
            }
            catch (Exception e)
            {
                Console.WriteLine("{0} Exception caught.", e);
            }

        }

    }

    private async Task SaveItem()
    {
        EditItem(_editMachine.VMId);
        var name = await sessionStorage.GetItemAsync<string>("token");
        Http.DefaultRequestHeaders.Remove("Authorization");
        Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + name);
        await Http.PutJsonAsync<MachineDetails>(apiUrl, _editMachine);
        await GetMachines();
        NavigationManager.NavigateTo("/machine");

    }

    private async Task AddItem()
    {
        var name = await sessionStorage.GetItemAsync<string>("token");
        Http.DefaultRequestHeaders.Remove("Authorization");
        Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + name);
        await Http.PostJsonAsync<MachineDetails>(apiUrl, _addMachine);
        await GetMachines();
    }

    public class MachineDetails
    {
        public Guid VMId { get; set; }
        public string RealID { get; set; }
        public string Name { get; set; }
        public string Configuration { get; set; }
        public string LastSave { get; set; }
        public ICollection<Networks> Networks { get; set; }
        public int RAM { get; set; }
        public int Cores { get; set; }
        public virtual ICollection<SC> SCs { get; set; }
        public Guid UserId { get; set; }
    }

    public class Networks
    {
        public Guid NetId { get; private set; }
        public string Name { get; private set; }
        public string Notes { get; private set; }
        public string InstanceID { get; private set; }
        public Guid VMId { get; private set; }
    }

    public class SC
    {
        public Guid SCId { get; private set; }
        public string Name { get; private set; }
        public string InstanceId { get; private set; }
        public virtual ICollection<VHD> VHDs { get; private set; }
        public virtual ICollection<CDDVD> CDDVDs { get; private set; }
        public Guid VMId { get; private set; }
    }

    public class VHD
    {
        public Guid VHDId { get; private set; }
        public Guid SCId { get; private set; }
        public string Name { get; private set; }
        public string InstanceId { get; private set; }
        public string Path { get; private set; }
        public int Size { get; private set; }
    }

    public class CDDVD
    {
        public Guid CDDVDId { get; private set; }
        public string InstanceId { get; private set; }
        public string Name { get; private set; }
        public Guid SCId { get; private set; }
    }


    string status;

    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            // Just load into .NET memory to show it can be done
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);

            status = $"Finished loading {file.Size} bytes from {file.Name}";
        }
    }

}
